package http

import (
	"context"
	"fmt"
	"html/template"
	"io"
	"io/fs"
	"net/http"
	"os"
	"os/signal"
	"path"
	"strings"
	"time"

	"golang.org/x/exp/slog"

	"github.com/AbsaOSS/env-binder/env"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

type config struct {
	// Serve content from public not embedded
	ServeEmbedded bool `env:"SERVE_EMBEDDED,default=true"`
}

var envConfig *config

func init() {
	envConfig = &config{}
	if err := env.Bind(envConfig); err != nil {
		panic(err)
	}
}

var contentSub fs.FS

type TemplateRenderer struct {
	templates *template.Template
}

// Render renders a template document
func (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	slog.Debug("render %s", name)
	// Add global methods if data is a map
	if viewContext, isMap := data.(map[string]interface{}); isMap {
		viewContext["reverse"] = c.Echo().Reverse
	}

	// https://stackoverflow.com/questions/36617949/how-to-use-base-template-file-for-golang-html-template
	tmpl := template.Must(t.templates.Clone())
	// contentSub = os.DirFS("./public")
	// template.ParseFS(contentSub, "*.html")
	// tmpl = template.Must(tmpl.ParseFS(contentSub, "*.html"))
	tmpl = template.Must(tmpl.ParseFS(contentSub, name))
	return tmpl.ExecuteTemplate(w, name, data)
}

func StartServer(host string, port int, content fs.FS) {
	var err error

	e := echo.New()
	e.HideBanner = true
	e.Debug = true // Show more detailed errors in json response
	e.Use(middleware.CORS())

	e.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{
		LogLevel: 4, // ERROR level
	}))

	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Skipper:          middleware.DefaultSkipper,
		Format:           `{"time":"${time_custom}","remote_ip":"${remote_ip}", "host":"${host}","method":"${method}","uri":"${uri}", "status":${status},"error":"${error}","bytes_out":${bytes_out}}` + "\n",
		CustomTimeFormat: "2006-01-02 15:04:05",
	}))

	if envConfig.ServeEmbedded {
		// Basically "cd" into the /public folder of the embedded content
		contentSub, err = fs.Sub(content, "public")
		if err != nil {
			panic(err)
		}
	} else {
		fmt.Println("Ignoring embedded content, serving from /public")
		contentSub = os.DirFS("./public")
	}

	renderer := &TemplateRenderer{
		templates: template.Must(template.ParseFS(contentSub, "*.html")),
	}
	e.Renderer = renderer

	// ROUTES

	// Autocreate routes for any .html files in /public that do not start with "_"
	fs.WalkDir(contentSub, ".", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		fname := d.Name()
		envMap, _ := envToMap()
		envMap["Title"] = fmt.Sprintf("Panopticon - %s", TitleFromFilename(fname))
		if strings.HasSuffix(fname, ".html") && !strings.HasPrefix(fname, "_") {
			println("Autogenerated Route => Path:", path, " Route:", PathFromFilenameWithoutExtension(fname))
			e.GET(PathFromFilenameWithoutExtension(fname), func(c echo.Context) error {
				return c.Render(http.StatusOK, fname, envMap)
			})
		}
		return nil
	})

	e.GET("/", func(c echo.Context) error {
		return c.Redirect(http.StatusMovedPermanently, "/home")
	})

	// Serve static files in public/
	e.GET("/*", echo.WrapHandler(http.FileServer(http.FS(contentSub))))

	listenAddr := fmt.Sprintf("%s:%v", host, port)

	go func() {
		if err := e.Start(listenAddr); err != http.ErrServerClosed {
			e.Logger.Fatal(err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server with a timeout of 10 seconds.
	// Use a buffered channel to avoid missing signals as recommended for signal.Notify
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}

func FilenameWithoutExtension(fn string) string {
	return strings.TrimSuffix(fn, path.Ext(fn))
}

func PathFromFilenameWithoutExtension(fn string) string {
	s := strings.TrimSuffix(fn, path.Ext(fn))
	return fmt.Sprintf("/%s", s)
}

func TitleFromFilename(fn string) string {
	return strings.ToTitle(FilenameWithoutExtension(fn))
}

func envToMap() (map[string]string, error) {
	envMap := make(map[string]string)
	var err error

	for _, v := range os.Environ() {
		// split_v := strings.Split(v, "=")
		split_v := strings.SplitN(v, "=", 2)
		envMap[split_v[0]] = split_v[1]
	}

	return envMap, err
}
