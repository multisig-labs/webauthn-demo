// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  address
) VALUES (
  ?
) RETURNING id
`

func (q *Queries) CreateAccount(ctx context.Context, address string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAccount, address)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTx = `-- name: CreateTx :exec
INSERT INTO txs (
  id, height, payer, payee, amount
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateTxParams struct {
	ID     string
	Height int64
	Payer  string
	Payee  string
	Amount int64
}

func (q *Queries) CreateTx(ctx context.Context, arg CreateTxParams) error {
	_, err := q.db.ExecContext(ctx, createTx,
		arg.ID,
		arg.Height,
		arg.Payer,
		arg.Payee,
		arg.Amount,
	)
	return err
}

const getAccountBalance = `-- name: GetAccountBalance :one
SELECT balance FROM accounts WHERE address = ?
`

func (q *Queries) GetAccountBalance(ctx context.Context, address string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountBalance, address)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const maxHeight = `-- name: MaxHeight :one
SELECT cast(COALESCE(max(height),0) as integer) as maxheight from txs
`

func (q *Queries) MaxHeight(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, maxHeight)
	var maxheight int64
	err := row.Scan(&maxheight)
	return maxheight, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts SET balance = ? WHERE address = ?
`

type UpdateAccountBalanceParams struct {
	Balance int64
	Address string
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountBalance, arg.Balance, arg.Address)
	return err
}
