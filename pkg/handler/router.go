package handler

import (
	"fmt"
	"io/fs"
	"net/http"
	"strings"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/multisig-labs/webauthn-demo/pkg/utils"
)

// All routes for the web server are hooked up here
func NewRouter(db string, webContent fs.FS) *echo.Echo {
	e := echo.New()
	e.HideBanner = true
	e.Debug = true // Show more detailed errors in json response
	e.HTTPErrorHandler = NewHTTPErrorHandler(HTTPErrorHandlerConfig{Debug: false, Logger: e.Logger})
	e.Validator = utils.NewCustomValidator()
	e.Use(middleware.CORS())
	e.Use(middleware.RequestID())
	e.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{
		LogLevel: 4, // ERROR level
	}))
	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Skipper:          middleware.DefaultSkipper,
		Format:           `{"time":"${time_custom}","remote_ip":"${remote_ip}", "host":"${host}","method":"${method}","uri":"${uri}", "status":${status},"error":"${error}","bytes_out":${bytes_out}}` + "\n",
		CustomTimeFormat: "2006-01-02 15:04:05",
	}))

	healthHandler := NewHealthHandler()
	e.GET("/health", healthHandler.Alive)

	apiHandler := NewApiHandler(db)
	e.GET("/balance", apiHandler.GetBalance)

	verifierHandler := NewVerifierHandler()
	e.POST("/verify", verifierHandler.Verify)

	// Autocreate routes for any .html files in /public that do not start with "_"
	e.Renderer = NewTemplateRenderer(webContent)
	fs.WalkDir(webContent, ".", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		fname := d.Name()
		envMap, _ := utils.EnvToMap()
		envMap["Title"] = fmt.Sprintf("WebAuthN - %s", utils.TitleFromFilename(fname))
		if strings.HasSuffix(fname, ".html") && !strings.HasPrefix(fname, "_") {
			println("Autogenerated Route => Path:", path, " Route:", utils.PathFromFilenameWithoutExtension(fname))
			e.GET(utils.PathFromFilenameWithoutExtension(fname), func(c echo.Context) error {
				return c.Render(http.StatusOK, fname, envMap)
			})
		}
		return nil
	})

	// Fallback route for any static content
	e.GET("/*", echo.WrapHandler(http.FileServer(http.FS(webContent))))

	return e
}

func bindAndValidate[T any](c echo.Context) (T, error) {
	var body T
	if err := (&echo.DefaultBinder{}).BindBody(c, &body); err != nil {
		return body, toHttpError(err)
	}

	if err := c.Validate(body); err != nil {
		return body, toHttpError(err)
	}
	return body, nil
}
